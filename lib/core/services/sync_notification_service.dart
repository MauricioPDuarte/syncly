import 'package:flutter/foundation.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

/// Servi√ßo interno de notifica√ß√µes do Syncly
///
/// Este servi√ßo gerencia todas as notifica√ß√µes relacionadas √† sincroniza√ß√£o
/// de forma independente, sem depender de implementa√ß√µes externas.
class SyncNotificationService {
  static SyncNotificationService? _instance;
  static SyncNotificationService get instance {
    _instance ??= SyncNotificationService._internal();
    return _instance!;
  }

  SyncNotificationService._internal();

  bool _isEnabled = true;
  bool _isInitialized = false;
  final Map<int, String> _activeNotifications = {};
  int _notificationIdCounter = 1000;
  
  late FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin;
  
  // Canais de notifica√ß√£o
  static const String _syncStatusChannelId = 'sync_status';
  static const String _syncErrorsChannelId = 'sync_errors';
  static const String _connectivityChannelId = 'connectivity';
  static const String _progressChannelId = 'progress';

  /// Inicializa o servi√ßo de notifica√ß√µes
  Future<void> initialize({required bool enabled}) async {
    _isEnabled = enabled;
    
    if (_isEnabled) {
      _flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();
      
      // Configura√ß√µes para Android
      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');
      
      // Configura√ß√µes para iOS
      const DarwinInitializationSettings initializationSettingsIOS =
          DarwinInitializationSettings(
        requestAlertPermission: true,
        requestBadgePermission: true,
        requestSoundPermission: true,
      );
      
      const InitializationSettings initializationSettings =
          InitializationSettings(
        android: initializationSettingsAndroid,
        iOS: initializationSettingsIOS,
      );
      
      await _flutterLocalNotificationsPlugin.initialize(initializationSettings);
      
      // Criar canais de notifica√ß√£o para Android
      await _createNotificationChannels();
      
      debugPrint('[Syncly] Servi√ßo de notifica√ß√µes inicializado com flutter_local_notifications');
    }
    
    _isInitialized = true;
  }

  /// Cria os canais de notifica√ß√£o para Android
  Future<void> _createNotificationChannels() async {
    final List<AndroidNotificationChannel> channels = [
      const AndroidNotificationChannel(
        _syncStatusChannelId,
        'Status da Sincroniza√ß√£o',
        description: 'Notifica√ß√µes sobre o status da sincroniza√ß√£o de dados',
        importance: Importance.defaultImportance,
      ),
      const AndroidNotificationChannel(
        _syncErrorsChannelId,
        'Erros de Sincroniza√ß√£o',
        description: 'Notifica√ß√µes sobre erros durante a sincroniza√ß√£o',
        importance: Importance.high,
      ),
      const AndroidNotificationChannel(
        _connectivityChannelId,
        'Conectividade',
        description: 'Notifica√ß√µes sobre mudan√ßas na conectividade',
        importance: Importance.defaultImportance,
      ),
      const AndroidNotificationChannel(
        _progressChannelId,
        'Progresso',
        description: 'Notifica√ß√µes de progresso de download e upload',
        importance: Importance.low,
        showBadge: false,
      ),
    ];
    
    for (final channel in channels) {
      await _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(channel);
    }
  }

  /// Verifica se as notifica√ß√µes est√£o habilitadas
  bool get isEnabled => _isEnabled && _isInitialized;

  /// Mostra uma notifica√ß√£o simples
  Future<void> showNotification({
    required String title,
    required String message,
    String? channelId,
    int? notificationId,
  }) async {
    if (!isEnabled) return;

    final id = notificationId ?? _generateNotificationId();
    _activeNotifications[id] = title;
    final channel = channelId ?? _syncStatusChannelId;

    try {
      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        _syncStatusChannelId,
        'Status da Sincroniza√ß√£o',
        channelDescription: 'Notifica√ß√µes sobre o status da sincroniza√ß√£o de dados',
        importance: Importance.defaultImportance,
        priority: Priority.defaultPriority,
      );
      
      const DarwinNotificationDetails iOSPlatformChannelSpecifics =
          DarwinNotificationDetails();
      
      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(
        android: androidPlatformChannelSpecifics,
        iOS: iOSPlatformChannelSpecifics,
      );
      
      await _flutterLocalNotificationsPlugin.show(
        id,
        title,
        message,
        platformChannelSpecifics,
      );
      
      debugPrint('[Syncly] Notifica√ß√£o exibida: $title - $message');
    } catch (e) {
      debugPrint('[Syncly] Erro ao exibir notifica√ß√£o: $e');
      // Fallback para debug print
      if (kDebugMode) {
        debugPrint('üîî [$title] $message');
      }
    }
  }

  /// Mostra uma notifica√ß√£o de progresso
  Future<void> showProgressNotification({
    required String title,
    required String message,
    required int progress,
    required int maxProgress,
    int? notificationId,
  }) async {
    if (!isEnabled) return;

    final id = notificationId ?? _generateNotificationId();
    _activeNotifications[id] = title;

    final percentage = ((progress / maxProgress) * 100).round();

    try {
      final AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        _progressChannelId,
        'Progresso',
        channelDescription: 'Notifica√ß√µes de progresso de download e upload',
        importance: Importance.low,
        priority: Priority.low,
        showProgress: true,
        maxProgress: maxProgress,
        progress: progress,
        onlyAlertOnce: true,
        showWhen: false,
      );
      
      const DarwinNotificationDetails iOSPlatformChannelSpecifics =
          DarwinNotificationDetails();
      
      final NotificationDetails platformChannelSpecifics =
          NotificationDetails(
        android: androidPlatformChannelSpecifics,
        iOS: iOSPlatformChannelSpecifics,
      );
      
      await _flutterLocalNotificationsPlugin.show(
        id,
        title,
        '$message ($percentage%)',
        platformChannelSpecifics,
      );
      
      debugPrint('[Syncly] Notifica√ß√£o de progresso: $title - $percentage%');
    } catch (e) {
      debugPrint('[Syncly] Erro ao exibir notifica√ß√£o de progresso: $e');
      // Fallback para debug print
      if (kDebugMode) {
        final progressBar = _generateProgressBar(progress, maxProgress);
        debugPrint('üìä [$title] $progressBar $percentage% - $message');
      }
    }
  }

  /// Cancela uma notifica√ß√£o espec√≠fica
  Future<void> cancelNotification(int notificationId) async {
    if (!isEnabled) return;

    try {
      await _flutterLocalNotificationsPlugin.cancel(notificationId);
      _activeNotifications.remove(notificationId);
      debugPrint('[Syncly] Notifica√ß√£o $notificationId cancelada');
    } catch (e) {
      debugPrint('[Syncly] Erro ao cancelar notifica√ß√£o $notificationId: $e');
    }
  }

  /// Cancela todas as notifica√ß√µes
  Future<void> cancelAllNotifications() async {
    if (!isEnabled) return;

    try {
      await _flutterLocalNotificationsPlugin.cancelAll();
      final count = _activeNotifications.length;
      _activeNotifications.clear();
      debugPrint('[Syncly] $count notifica√ß√µes canceladas');
    } catch (e) {
      debugPrint('[Syncly] Erro ao cancelar todas as notifica√ß√µes: $e');
    }
  }

  /// Mostra notifica√ß√£o de in√≠cio de sincroniza√ß√£o
  Future<void> showSyncStartedNotification() async {
    await showNotification(
      title: 'Sincroniza√ß√£o',
      message: 'Iniciando sincroniza√ß√£o de dados...',
      channelId: _syncStatusChannelId,
    );
  }

  /// Mostra notifica√ß√£o de sincroniza√ß√£o conclu√≠da
  Future<void> showSyncCompletedNotification() async {
    await showNotification(
      title: 'Sincroniza√ß√£o',
      message: 'Sincroniza√ß√£o conclu√≠da com sucesso',
      channelId: _syncStatusChannelId,
    );
  }

  /// Mostra notifica√ß√£o de erro na sincroniza√ß√£o
  Future<void> showSyncErrorNotification(String error) async {
    await _showErrorNotification(
      title: 'Erro na Sincroniza√ß√£o',
      message: 'Falha ao sincronizar: $error',
    );
  }

  /// Mostra notifica√ß√£o de modo offline
  Future<void> showOfflineModeNotification() async {
    await _showConnectivityNotification(
      title: 'Modo Offline',
      message: 'Aplicativo em modo offline. Dados ser√£o sincronizados quando a conex√£o for restabelecida.',
    );
  }

  /// Mostra notifica√ß√£o de volta ao modo online
  Future<void> showOnlineModeNotification() async {
    await _showConnectivityNotification(
      title: 'Conectado',
      message: 'Conex√£o restabelecida. Iniciando sincroniza√ß√£o...',
    );
  }

  /// Mostra notifica√ß√£o de progresso de download
  Future<void> showDownloadProgressNotification({
    required String fileName,
    required int progress,
    required int total,
    int? notificationId,
  }) async {
    await showProgressNotification(
      title: 'Download',
      message: 'Baixando $fileName...',
      progress: progress,
      maxProgress: total,
      notificationId: notificationId,
    );
  }

  /// Mostra notifica√ß√£o de progresso de upload
  Future<void> showUploadProgressNotification({
    required String fileName,
    required int progress,
    required int total,
    int? notificationId,
  }) async {
    await showProgressNotification(
      title: 'Upload',
      message: 'Enviando $fileName...',
      progress: progress,
      maxProgress: total,
      notificationId: notificationId,
    );
  }

  /// Mostra notifica√ß√£o de erro com canal espec√≠fico
  Future<void> _showErrorNotification({
    required String title,
    required String message,
    int? notificationId,
  }) async {
    if (!isEnabled) return;

    final id = notificationId ?? _generateNotificationId();
    _activeNotifications[id] = title;

    try {
      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        _syncErrorsChannelId,
        'Erros de Sincroniza√ß√£o',
        channelDescription: 'Notifica√ß√µes sobre erros durante a sincroniza√ß√£o',
        importance: Importance.high,
        priority: Priority.high,
      );
      
      const DarwinNotificationDetails iOSPlatformChannelSpecifics =
          DarwinNotificationDetails();
      
      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(
        android: androidPlatformChannelSpecifics,
        iOS: iOSPlatformChannelSpecifics,
      );
      
      await _flutterLocalNotificationsPlugin.show(
        id,
        title,
        message,
        platformChannelSpecifics,
      );
      
      debugPrint('[Syncly] Notifica√ß√£o de erro exibida: $title - $message');
    } catch (e) {
      debugPrint('[Syncly] Erro ao exibir notifica√ß√£o de erro: $e');
      if (kDebugMode) {
        debugPrint('‚ùå [$title] $message');
      }
    }
  }

  /// Mostra notifica√ß√£o de conectividade com canal espec√≠fico
  Future<void> _showConnectivityNotification({
    required String title,
    required String message,
    int? notificationId,
  }) async {
    if (!isEnabled) return;

    final id = notificationId ?? _generateNotificationId();
    _activeNotifications[id] = title;

    try {
      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        _connectivityChannelId,
        'Conectividade',
        channelDescription: 'Notifica√ß√µes sobre mudan√ßas na conectividade',
        importance: Importance.defaultImportance,
        priority: Priority.defaultPriority,
      );
      
      const DarwinNotificationDetails iOSPlatformChannelSpecifics =
          DarwinNotificationDetails();
      
      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(
        android: androidPlatformChannelSpecifics,
        iOS: iOSPlatformChannelSpecifics,
      );
      
      await _flutterLocalNotificationsPlugin.show(
        id,
        title,
        message,
        platformChannelSpecifics,
      );
      
      debugPrint('[Syncly] Notifica√ß√£o de conectividade exibida: $title - $message');
    } catch (e) {
      debugPrint('[Syncly] Erro ao exibir notifica√ß√£o de conectividade: $e');
      if (kDebugMode) {
        debugPrint('üåê [$title] $message');
      }
    }
  }

  /// Gera um ID √∫nico para notifica√ß√£o
  int _generateNotificationId() {
    return _notificationIdCounter++;
  }

  /// Gera uma barra de progresso visual para debug
  String _generateProgressBar(int progress, int maxProgress,
      {int barLength = 20}) {
    final percentage = progress / maxProgress;
    final filledLength = (percentage * barLength).round();
    final emptyLength = barLength - filledLength;

    return '[${'‚ñà' * filledLength}${'‚ñë' * emptyLength}]';
  }

  /// Obt√©m o n√∫mero de notifica√ß√µes ativas
  int get activeNotificationsCount => _activeNotifications.length;

  /// Obt√©m a lista de notifica√ß√µes ativas
  Map<int, String> get activeNotifications =>
      Map.unmodifiable(_activeNotifications);

  /// Limpa o servi√ßo (usado para testes)
  void dispose() {
    if (_isEnabled && _isInitialized) {
      cancelAllNotifications();
    }
    _activeNotifications.clear();
    _isInitialized = false;
    _notificationIdCounter = 1000;
  }
}
